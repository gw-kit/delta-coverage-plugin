name: Render Delta Coverage Report

inputs:
  title:
    description: 'Title of the report.'
    default: 'Delta Coverage Report'
    required: false

  message:
    description: 'Message to render.'
    required: false
    default: ''

  delta-coverage-report:
    description: 'Report to delta-coverage markdown report.'
    required: true
    default: ''

  github-token:
    description: 'GitHub token.'
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"

  steps:

    - name: Validate args
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const reportPath = `${{ inputs.delta-coverage-report }}`.trim()
          if (!reportPath) {
            core.setFailed('delta-coverage-report input is empty.')
          }

    - name: Create Comment Marker
      id: comment-marker
      if: ${{ inputs.title != '' }}
      shell: bash
      run: echo 'result=${{ format('<!-- marker={0} -->', inputs.title) }}' >> $GITHUB_OUTPUT

    - name: Find Existing Comment In PR
      id: find-comment
      if: ${{ steps.comment-marker.outputs.result && github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const response = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          })
          const comment = response.data.find(it => 
            it.body.includes('${{ steps.comment-marker.outputs.result }}')
          )
          if (comment) {
            console.log(`Comment found: ${comment.id}`);
            return comment.id
          }

    - id: build-message
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const reportContent = fs.readFileSync('${{ inputs.delta-coverage-report }}');
          const summaryBuffer = core.summary
            .addRaw('${{ steps.comment-marker.outputs.result }}', true)
            .addRaw('${{ inputs.message }}', true)
            .addRaw(reportContent, true)
          return summaryBuffer.stringify() // generate text

    - name: Read Coverage Summary
      id: summary
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const reportContent = fs.readFileSync('build/reports/coverage-reports/summary.json');
          const summaryArray = JSON.parse(reportContent)
          
          return summaryArray.some((view) => view.violations.length > 0);


    - name: Create Check Run
      uses: actions/github-script@v7
      with:
        script: |
          const violations = ${{ steps.summary.outputs.result }};
          const conclusion = violations ? 'failure' : 'success';
          const res = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Test Name',
            head_sha: `${{ github.event.pull_request.head.sha }}`,
            status: 'completed',
            conclusion: conclusion,
            output: {
                title: 'Delta Coverage Report',
                summary: ${{ steps.build-message.outputs.result }}
            }
          });

    - name: Update or Create Comment
      uses: actions/github-script@v7
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          if ('${{ steps.find-comment.outputs.result }}') {
            github.rest.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: '${{ steps.find-comment.outputs.result }}',
              body: ${{ steps.build-message.outputs.result }}
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{ steps.build-message.outputs.result }}
            })
          }
