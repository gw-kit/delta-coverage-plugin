name: Render Delta Coverage Report

inputs:
  title:
    description: 'Title in PR comment.'
    default: 'Delta Coverage Check'
    required: false

  summary-report-path:
    description: 'Report to delta-coverage summary report.'
    required: true
    default: 'build/reports/coverage-reports/summary.json'

  suppress-check-failures:
    description: 'Suppress failures.'
    required: false
    default: ${{ contains(github.event.pull_request.labels.*.name, 'suppress-delta-coverage') }}

  github-token:
    description: 'GitHub token.'
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"

  steps:

    - name: Validate args
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const reportPath = `${{ inputs.summary-report-path }}`.trim()
          if (!reportPath) {
            core.setFailed('summary-report-path input is empty.')
          }

    - name: Create Check Run
      id: create-check-runs
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const createCheckRuns = require('${{ github.action_path }}/create-check-runs.js');
          const checkRuns = await createCheckRuns({
            summaryReportPath: `${{ inputs.summary-report-path }}`,
            ignoreCoverageFailure: ${{ inputs.suppress-check-failures }},
            core: core,
            context: context,
            github: github,
            headSha: `${{ github.event.pull_request.head.sha }}`
          });
          core.setOutput('check-runs', checkRuns);

    - name: Create Comment Marker
      id: comment-marker
      if: ${{ inputs.title != '' }}
      shell: bash
      run: echo 'result=${{ format('<!-- marker={0} -->', inputs.title) }}' >> $GITHUB_OUTPUT

    - name: Find Existing Comment In PR
      id: find-comment
      if: ${{ steps.comment-marker.outputs.result && github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const response = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          })
          const comment = response.data.find(it => 
            it.body.includes('${{ steps.comment-marker.outputs.result }}')
          )
          if (comment) {
            console.log(`Comment found: ${comment.id}`);
            return comment.id
          }

    - name: Log check-runs
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          console.log(`${{ steps.create-check-runs.outputs.check-runs }}`)

    - id: build-message
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const checkRunsJson = `${{ steps.create-check-runs.outputs.check-runs }}`;
          const checkRuns = JSON.parse(checkRunsJson);
          
          let summaryBuffer = core.summary
            .addHeading(`${{ inputs.title }}`, '2')
            .addRaw('${{ steps.comment-marker.outputs.result }}', true)
            .addEOL()
          
          checkRuns.forEach(checkRun => {
            const conclusion = checkRun.conclusion === 'success' ? '✅' : '❌';
            const violations = checkRun.violations
              .map(it => `   - \`${it}\``)
              .join('\n');
            const runText = `- ${conclusion} [${checkRun.viewName}](${checkRun.url}) \n${violations}`
            summaryBuffer = summaryBuffer.addRaw(runText, true);
          });
          return summaryBuffer.stringify() // generate text

    - name: Update or Create Comment
      uses: actions/github-script@v7
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          if ('${{ steps.find-comment.outputs.result }}') {
            github.rest.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: '${{ steps.find-comment.outputs.result }}',
              body: ${{ steps.build-message.outputs.result }}
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{ steps.build-message.outputs.result }}
            })
          }
