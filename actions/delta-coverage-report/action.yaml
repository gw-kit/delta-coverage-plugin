name: Render Delta Coverage Report

inputs:
  title:
    description: 'Title of the report.'
    default: 'Delta Coverage Report'
    required: false

  message:
    description: 'Message to render.'
    required: false
    default: ''

  delta-coverage-report:
    description: 'Report to delta-coverage markdown report.'
    required: true
    default: ''

  github-token:
    description: 'GitHub token.'
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"

  steps:

    - name: Validate args
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const reportPath = `${{ inputs.delta-coverage-report }}`.trim()
          if (!reportPath) {
            core.setFailed('delta-coverage-report input is empty.')
          }

    - name: Create Comment Marker
      id: comment-marker
      if: ${{ inputs.title != '' }}
      shell: bash
      run: echo 'result=${{ format('<!-- marker={0} -->', inputs.title) }}' >> $GITHUB_OUTPUT

    - name: Find Existing Comment In PR
      id: find-comment
      if: ${{ steps.comment-marker.outputs.result && github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const response = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          })
          const comment = response.data.find(it => 
            it.body.includes('${{ steps.comment-marker.outputs.result }}')
          )
          if (comment) {
            console.log(`Comment found: ${comment.id}`);
            return comment.id
          }

    - id: build-message
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const reportContent = fs.readFileSync('${{ inputs.delta-coverage-report }}');
          const summaryBuffer = core.summary
            .addHeading('${{ inputs.title }}', 2)
            .addRaw('${{ steps.comment-marker.outputs.result }}', true)
            .addRaw('${{ inputs.message }}', true)
            .addRaw(reportContent, true)
          summaryBuffer.write() // write to summary
          return summaryBuffer.stringify() // generate text

    - name: Update or Create Comment
      uses: actions/github-script@v7
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          if ('${{ steps.find-comment.outputs.result }}') {
            github.rest.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: '${{ steps.find-comment.outputs.result }}',
              body: ${{ steps.build-message.outputs.result }}
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{ steps.build-message.outputs.result }}
            })
          }
